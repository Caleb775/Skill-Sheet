{"version":3,"file":"static/js/824.f32bd426.chunk.js","mappings":"8KAGA,MAgIA,EAhIoBA,KAClB,MAAMC,GAAeC,EAAAA,EAAAA,QAAO,MA4H5B,OA1HAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAYH,EAAaI,QAGzBC,EAAQ,IAAIC,EAAAA,IACZC,EAAcP,EAAaI,QAAQI,YAAcR,EAAaI,QAAQK,aAGtEC,EAAW,IAAIJ,EAAAA,IAAwB,GAAIC,EAAa,EAAG,KACjEG,EAASC,SAASC,EAAI,IACtBP,EAAMQ,IAAIH,GAEV,MAAMI,EAAW,IAAIR,EAAAA,IAAwB,GAAIC,EAAa,EAAG,KACjEF,EAAMQ,IAAIC,GAEV,MAAMC,EAAU,IAAIT,EAAAA,IAAwB,GAAIC,EAAa,EAAG,KAChEF,EAAMQ,IAAIE,GAGV,MAAMC,EAAW,IAAIV,EAAAA,IACrBU,EAASC,QAAQC,OAAOC,WAAa,IAAKD,OAAOE,YAAc,KAC/DjB,EAAUkB,YAAYL,EAASM,YAE/B,IAAIC,EAASb,EAGb,MAAMc,EAAa,IAAIlB,EAAAA,IAA2B,CAChDmB,MAAO,SACPC,SAAU,SACVC,UAAW,GACXC,UAAW,KAGPC,EAAU,IAAIvB,EAAAA,IAAqB,GAAI,GAAI,IAC3CwB,EAAM,IAAIxB,EAAAA,IAAWuB,EAASL,GACpCnB,EAAMQ,IAAIiB,GAGV,MAAMC,EAAW,IAAIzB,EAAAA,IAAiB,SAAU,EAAG,KACnDyB,EAASpB,SAASqB,IAAI,EAAG,EAAG,GAC5B3B,EAAMQ,IAAIkB,GAGV,MAAME,EAAU,IAAI3B,EAAAA,IAAmB,SAAU,IACjDD,EAAMQ,IAAIoB,GAGV,MAAMC,EAAe,IAAI5B,EAAAA,IACnB6B,EAAe,IAAI7B,EAAAA,IAAqB,CAAEmB,MAAO,WAEjDW,EAAY,IAAIC,aAAaC,MAEnC,IAAK,IAAIC,EAAI,EAAGA,EAHE,IAGaA,IAE7BH,EAAc,EAAJG,GAAiC,KAAvBC,KAAKC,SAAW,IACpCL,EAAc,EAAJG,EAAQ,GAA6B,KAAvBC,KAAKC,SAAW,IACxCL,EAAc,EAAJG,EAAQ,GAA6B,KAAvBC,KAAKC,SAAW,IAG1CP,EAAaQ,aAAa,WAAY,IAAIpC,EAAAA,IAAsB8B,EAAW,IAC3E,MAAMO,EAAQ,IAAIrC,EAAAA,IAAa4B,EAAcC,GAC7C9B,EAAMQ,IAAI8B,GAGV,MAAMC,EAAe,IAAItC,EAAAA,IAAwB,CAAEoB,SAAU,QAAUD,MAAO,MACxEoB,EAAc,IAAIvC,EAAAA,IAAqB,GAAI,GAAI,IAC/CwC,EAAQ,IAAIxC,EAAAA,IAAWuC,EAAaD,GAC1CE,EAAMnC,SAASqB,IAAI,IAAK,EAAG,GAC3B3B,EAAMQ,IAAIiC,GAGV,MAAMC,EAAc,IAAIzC,EAAAA,IAAwB,CAAEoB,SAAU,QAAUD,MAAO,WACvEuB,EAAa,IAAI1C,EAAAA,IAAqB,GAAI,GAAI,IAC9C2C,EAAO,IAAI3C,EAAAA,IAAW0C,EAAYD,GACxCE,EAAKtC,SAASqB,IAAI,IAAK,EAAG,GAC1B3B,EAAMQ,IAAIoC,GAEV,MAAMC,EAAQ,IAAI5C,EAAAA,IAuClB,OApCA,SAAS6C,IACPC,sBAAsBD,GAEtB,MAAME,EAAOH,EAAMI,iBACbC,EAAiB,GAAPF,EAChBP,EAAMnC,SAASqB,IAAI,IAAMQ,KAAKgB,IAAID,GAAU,IAAMf,KAAKiB,IAAIF,GAAU,GAErE,MAAMG,EAAiB,GAAPL,EAChBJ,EAAKtC,SAASqB,IAAI,IAAMQ,KAAKgB,IAAIE,GAAU,IAAMlB,KAAKiB,IAAIC,GAAU,GAGpE3C,EAAQJ,SAASqB,IAAIiB,EAAKtC,SAASgD,EAAGV,EAAKtC,SAASiD,EAAG,IACvD7C,EAAQ8C,OAAO/B,EAAInB,UACnBI,EAAQ+C,GAAG9B,IAAI,EAAG,EAAG,GAGrBlB,EAASiD,SAAS/B,IAAIQ,KAAKwB,GAAK,GAAIxB,KAAKyB,MAAMhB,EAAKtC,SAASgD,EAAIb,EAAMnC,SAASgD,EAAGV,EAAKtC,SAASiD,EAAId,EAAMnC,SAASiD,GAAI,GACxH9C,EAASH,SAASqB,IAAIc,EAAMnC,SAASgD,EAAGb,EAAMnC,SAASiD,EAAG,IAE1D5C,EAASkD,OAAO7D,EAAOkB,EACzB,CAEA4B,GAGAgB,SAASC,iBAAiB,WAAYC,IACd,KAAlBA,EAAMC,QACR/C,EAASb,EACkB,KAAlB2D,EAAMC,QACf/C,EAAST,EACkB,KAAlBuD,EAAMC,UACf/C,EAASR,EACX,IAIK,KACLC,EAASuD,UACTpE,EAAUqE,YAAYxD,EAASM,WAAW,CAC3C,GACA,KAEImD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAkBC,IAAK3E,GAAgB,C","sources":["SolarSystem.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport * as THREE from 'three';\r\n\r\nconst SolarSystem = () => {\r\n  const containerRef = useRef(null); // Reference to the container for the 3D scene\r\n\r\n  useEffect(() => {\r\n    const container = containerRef.current; // Get the current DOM element\r\n\r\n    // Set up the Three.js scene\r\n    const scene = new THREE.Scene();\r\n    const aspectRatio = containerRef.current.clientWidth / containerRef.current.clientHeight;\r\n\r\n    // Create cameras for different perspectives\r\n    const aboveCam = new THREE.PerspectiveCamera(75, aspectRatio, 1, 1e6);\r\n    aboveCam.position.z = 1000; // Position the camera high above the scene\r\n    scene.add(aboveCam); // Add the above camera to the scene\r\n\r\n    const earthCam = new THREE.PerspectiveCamera(75, aspectRatio, 1, 1e6);\r\n    scene.add(earthCam); // Add the Earth camera\r\n\r\n    const marsCam = new THREE.PerspectiveCamera(75, aspectRatio, 1, 1e6);\r\n    scene.add(marsCam); // Add the Mars camera\r\n\r\n    // Set up the renderer\r\n    const renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(window.innerWidth / 1.8, window.innerHeight / 1.9);\r\n    container.appendChild(renderer.domElement); // Attach the renderer to the DOM\r\n\r\n    let camera = aboveCam; // Start with the above camera as the default\r\n\r\n    // Create the Sun with MeshStandardMaterial for better lighting effects\r\n    const sunSurface = new THREE.MeshStandardMaterial({\r\n      color: 0xFFD700, // Gold color for the Sun\r\n      emissive: 0xFFD700, // Emissive color to make it glow\r\n      roughness: 0.5, // Surface roughness\r\n      metalness: 0.5, // Metalness level\r\n    });\r\n\r\n    const sunStar = new THREE.SphereGeometry(50, 28, 21); // Geometry for the Sun\r\n    const sun = new THREE.Mesh(sunStar, sunSurface);\r\n    scene.add(sun); // Add the Sun to the scene\r\n\r\n    // Set up sunlight as a point light\r\n    const sunlight = new THREE.PointLight(0xffffff, 2, 1000); // White point light\r\n    sunlight.position.set(0, 0, 0); // Position at the center of the Sun\r\n    scene.add(sunlight); // Add the point light to the scene\r\n\r\n    // Add ambient light to provide a base light level\r\n    const ambient = new THREE.AmbientLight(0xffffff, 0.5); // Lower intensity for realism\r\n    scene.add(ambient); // Add ambient light to the scene\r\n\r\n    // Optional: Create a star field\r\n    const starGeometry = new THREE.BufferGeometry();\r\n    const starMaterial = new THREE.PointsMaterial({ color: 0xffffff }); // Material for stars\r\n    const starCount = 5000; // Number of stars to create\r\n    const positions = new Float32Array(starCount * 3); // Array to hold star positions\r\n\r\n    for (let i = 0; i < starCount; i++) {\r\n      // Randomly generate positions for stars\r\n      positions[i * 3] = (Math.random() - 0.5) * 2000; // Random x position\r\n      positions[i * 3 + 1] = (Math.random() - 0.5) * 2000; // Random y position\r\n      positions[i * 3 + 2] = (Math.random() - 0.5) * 2000; // Random z position\r\n    }\r\n\r\n    starGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3)); // Set positions\r\n    const stars = new THREE.Points(starGeometry, starMaterial); // Create stars from geometry and material\r\n    scene.add(stars); // Add stars to the scene\r\n\r\n    // Create Earth\r\n    const earthSurface = new THREE.MeshPhongMaterial({ emissive: 0x1a1a1a, color: 0x0000cd });\r\n    const earthPlanet = new THREE.SphereGeometry(20, 20, 15); // Geometry for Earth\r\n    const earth = new THREE.Mesh(earthPlanet, earthSurface);\r\n    earth.position.set(250, 0, 0); // Position Earth\r\n    scene.add(earth); // Add Earth to the scene\r\n\r\n    // Create Mars\r\n    const marsSurface = new THREE.MeshPhongMaterial({ emissive: 0x1a1a1a, color: 0xb22222 });\r\n    const marsPlanet = new THREE.SphereGeometry(20, 20, 15); // Geometry for Mars\r\n    const mars = new THREE.Mesh(marsPlanet, marsSurface);\r\n    mars.position.set(500, 0, 0); // Position Mars\r\n    scene.add(mars); // Add Mars to the scene\r\n\r\n    const clock = new THREE.Clock(); // Create a clock to track time\r\n\r\n    // Animation function\r\n    function animate() {\r\n      requestAnimationFrame(animate); // Request the next frame for animation\r\n\r\n      const time = clock.getElapsedTime(); // Get the elapsed time since the clock started\r\n      const e_angle = time * 0.8; // Calculate the angle for Earth's orbit\r\n      earth.position.set(250 * Math.cos(e_angle), 250 * Math.sin(e_angle), 0); // Move Earth in orbit\r\n\r\n      const m_angle = time * 0.3; // Calculate the angle for Mars' orbit\r\n      mars.position.set(500 * Math.cos(m_angle), 500 * Math.sin(m_angle), 0); // Move Mars in orbit\r\n\r\n      // Update the Mars camera's position and orientation\r\n      marsCam.position.set(mars.position.x, mars.position.y, 22);\r\n      marsCam.lookAt(sun.position); // Point Mars camera at the Sun\r\n      marsCam.up.set(0, 0, 1); // Set the up direction for Mars camera\r\n\r\n      // Update the Earth camera's position and orientation\r\n      earthCam.rotation.set(Math.PI / 2, -Math.atan2(mars.position.x - earth.position.x, mars.position.y - earth.position.y), 0);\r\n      earthCam.position.set(earth.position.x, earth.position.y, 22); // Position the Earth camera\r\n\r\n      renderer.render(scene, camera); // Render the scene from the current camera's perspective\r\n    }\r\n\r\n    animate(); // Start the animation loop\r\n\r\n    // Event listener for keydown events to switch cameras\r\n    document.addEventListener(\"keydown\", (event) => {\r\n      if (event.keyCode === 65) { // If 'A' is pressed\r\n        camera = aboveCam; // Switch to the above camera\r\n      } else if (event.keyCode === 69) { // If 'E' is pressed\r\n        camera = earthCam; // Switch to the Earth camera\r\n      } else if (event.keyCode === 80) { // If 'P' is pressed\r\n        camera = marsCam; // Switch to the Mars camera\r\n      }\r\n    });\r\n\r\n    // Cleanup function to dispose of the renderer when the component unmounts\r\n    return () => {\r\n      renderer.dispose(); // Dispose of the WebGL renderer\r\n      container.removeChild(renderer.domElement); // Remove the renderer's DOM element\r\n    };\r\n  }, []);\r\n\r\n  return <div className=\"jack-in-the-box\" ref={containerRef} />; // Render the container for the scene\r\n};\r\n\r\nexport default SolarSystem; // Export the component\r\n"],"names":["SolarSystem","containerRef","useRef","useEffect","container","current","scene","THREE","aspectRatio","clientWidth","clientHeight","aboveCam","position","z","add","earthCam","marsCam","renderer","setSize","window","innerWidth","innerHeight","appendChild","domElement","camera","sunSurface","color","emissive","roughness","metalness","sunStar","sun","sunlight","set","ambient","starGeometry","starMaterial","positions","Float32Array","starCount","i","Math","random","setAttribute","stars","earthSurface","earthPlanet","earth","marsSurface","marsPlanet","mars","clock","animate","requestAnimationFrame","time","getElapsedTime","e_angle","cos","sin","m_angle","x","y","lookAt","up","rotation","PI","atan2","render","document","addEventListener","event","keyCode","dispose","removeChild","_jsx","className","ref"],"sourceRoot":""}